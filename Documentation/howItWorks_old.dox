
/*! \file deviceScheduler/CCDeviceScheduler.h

    Details out of .txt.
*/
/*! \page page1
    \brief A macro that returns the maximum of \a a and \a b.
   
    Details.
*/

/*! \file deviceScheduler/deviceScheduler.h

    Details out of .txt.
*/

/*! \page page2

The target of developing this piece of software was to design a more or less univeral scheduler, suitable to meet needs that i am confronted with in my bussines. It should be able to switch things on and off, controll stepper motors or servo motors, reacting to time- or electrical events. It should be  capable to work with any number of devices of several kind. Like a printing system, where different printers can be added to the printing system by providing a driver-software, different drivers for new devices should be addable easily. <br> 
This scheduler should be easy to be set up, adjustable to the number and kind of devices needed, expandable and downscaleable as the project and the micro controller requires.
     
Basic concept of this scheduler-software is the strict separation of device controlling and device scheduling. All the scheduling is done by a scheduler unit. This scheduler unit starts, stops, supervises and coordinates all needed devices. The physical control of the device on the other side, is done by the device unit. <br>

The scheduling unit - represented by the scheduler class - reads the device’s task list and makes the device perform it's tasks. This class knows i.e. by witch event a device is to be started, if it is to be stopped or it stops normally by reaching it's target position etc. It’s counterpart, the device class, is responsible to control the device physically. This class knows, how to rotate the motor in the requested direction with the desired velocity and accelleration. That means, this class knows, how to enable it’s device (i.e. bring some GPIO-pins to a specified level), how to calculate the length of PWM-pulses for it’s servo, that shall make a constantly accelerated movement, or when exactly the next step of it’s stepper motor is to be done - and brings it to the electrical output. <br>
So, the scheduler works as follows: <br>
<br>
So, the scheduler works as follows: <br>


@startuml
class scheduler {
start, stop, switch, coordinate and supervise the tasks
}

class device {
set the GPIO-pins as needed to perform the task
}
scheduler -> device
@enduml



Looking to this sceme, it's obvious, that, setting up the GPIO's takes only some microseconds, whereas the task itselves may need thousends times longer. I.e. switching a lamp or even pulsing a lamp for maybe 20s at 50Hz takes just some us, where the device class really needs to work - however this "work" needs to be done precise at a specific date. 


--> the device is
performing a task
at the moment;
--> the device is
not to be stopped,
but something else could be 
needed to be done;

The device it selves responds to the selector @c startTask() and runs all necessary code to start it’s task and returns. As well, it runs all the code to stop a task, when it’s selector @c stopTask() is called, and returns. When the selector @c operateTask() is called, the device class determines if anything is to be done within the task, does it and returns, or returns immediately.




Though operating different kinds of devices the scheduler needs to have different device classes - but all of them need to collaborate with the scheduler in the same matter. The specific class carries all the code, that is neccessary to control this specific kind of device, i.e. the code to generate the PWM signal is inside the DC-Controller class, the code to switch between half step and quarter step microstepping mode is inside the stepper class, the code to calculate an accelerated rotation of a servo motor is inside the servo class.

Other devices, needing different code to be controlled, can be added here easyly.


All device classes (CCStepper class, CCServo class, CCDcControl class) are now inherited from the same base class (CCDevice class). So all sub classes share the same interface to be controlled with. They share a set of methods and members that are quite abstract - suitable to control common operations of arbitrary devices. They are:



 */
